{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azdfcovproject"
		},
		"tr_ingest_population_data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ac51013d-8cee-418a-a63d-9aa071e96189/resourceGroups/mory_demos/providers/Microsoft.Storage/storageAccounts/azstoragecovproject"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_data",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissionsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountrySource"
						},
						{
							"dataset": {
								"referenceName": "ds_date_lookup",
								"type": "DatasetReference"
							},
							"name": "DateLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_week",
								"type": "DatasetReference"
							},
							"name": "WeeklySink"
						},
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_days",
								"type": "DatasetReference"
							},
							"name": "DailySink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqFields"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectReqFields2"
						},
						{
							"name": "DateOutput"
						},
						{
							"name": "DeriveECDCYearWeek"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivotWeekly"
						},
						{
							"name": "PivotDaily"
						},
						{
							"name": "SortDaily"
						},
						{
							"name": "SortWeekly"
						},
						{
							"name": "SelectForSinkDaily"
						},
						{
							"name": "SelectForSinkWeekly"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountrySource",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DateLookup",
						"HospitalAdmissionsSource select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqFields",
						"SelectReqFields, CountrySource lookup(SelectReqFields@country == CountrySource@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountry",
						"LookupCountry select(mapColumn(",
						"          country = SelectReqFields@country,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqFields2",
						"SelectReqFields2 split(indicator == \"Daily hospital occupancy\" || indicator == \"Daily ICU occupancy\",",
						"     disjoint: false) ~> DateOutput@(Daily, Weekly)",
						"DateLookup derive(ecdc_year_week = year + \"-W\" + lpad(week_of_year, 2, \"0\")) ~> DeriveECDCYearWeek",
						"DeriveECDCYearWeek aggregate(groupBy(ecdc_year_week),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> AggDimDate",
						"DateOutput@Weekly, AggDimDate join(reported_year_week == ecdc_year_week,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> JoinWithDate",
						"JoinWithDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source,",
						"          week_start_date,",
						"          week_end_date),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotWeekly",
						"DateOutput@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotDaily",
						"PivotDaily sort(desc(reported_date, true),",
						"     asc(country, true)) ~> SortDaily",
						"PivotWeekly sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> SortWeekly",
						"SortDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          {hospital occupancy_count} = {Daily hospital occupancy_count},",
						"          icu_occupancy_count = {Daily ICU occupancy_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectForSinkDaily",
						"SortWeekly select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          reported_week_start_date = week_start_date,",
						"          reported_week_end_date = week_end_date,",
						"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k_count},",
						"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k_count},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectForSinkWeekly",
						"SelectForSinkWeekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> WeeklySink",
						"SelectForSinkDaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DailySink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_cases_and_deaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_cases_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_death",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesAndDeathsSource": {},
									"CountryLookup": {},
									"CasesAndDeathsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_hospital_data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissionsSource": {},
									"CountrySource": {},
									"DateLookup": {},
									"WeeklySink": {},
									"DailySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_ecdc_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_ecdc_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-03-10T11:05:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_population_data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}