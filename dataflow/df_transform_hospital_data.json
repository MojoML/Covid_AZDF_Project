{
	"name": "df_transform_hospital_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_data",
						"type": "DatasetReference"
					},
					"name": "HospitalData"
				},
				{
					"dataset": {
						"referenceName": "df_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryCodes"
				},
				{
					"dataset": {
						"referenceName": "ds_date_lookup",
						"type": "DatasetReference"
					},
					"name": "DateLookup"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SelectDayData"
				},
				{
					"name": "PivotCountsDay"
				},
				{
					"name": "RenameColumnsDay"
				},
				{
					"name": "LookupCountryCodesDay"
				},
				{
					"name": "PrepareForSinkDay"
				},
				{
					"name": "SelectWeekData"
				},
				{
					"name": "PivotCountsWeek"
				},
				{
					"name": "RenameColumnsWeek"
				},
				{
					"name": "LookupCountryCodesWeek"
				},
				{
					"name": "LookupDates"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryCodes",
				"source(output(",
				"          date_key as string,",
				"          date as date,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DateLookup",
				"HospitalData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDayData",
				"SelectDayData pivot(groupBy(country,",
				"          reported_date,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'ICU occupancy']),",
				"     counts = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotCountsDay",
				"PivotCountsDay select(mapColumn(",
				"          country,",
				"          reported_date,",
				"          source,",
				"          hospital_occupancy_counts = {Daily hospital occupancy_counts},",
				"          icu_occupancy_counts = {ICU occupancy_counts}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumnsDay",
				"RenameColumnsDay, CountryCodes lookup(RenameColumnsDay@country == CountryCodes@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCodesDay",
				"LookupCountryCodesDay select(mapColumn(",
				"          country = RenameColumnsDay@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          hospital_occupancy_counts,",
				"          icu_occupancy_counts,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PrepareForSinkDay",
				"HospitalData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          year_week,",
				"          value,",
				"          source,",
				"          date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectWeekData",
				"SelectWeekData pivot(groupBy(country,",
				"          source,",
				"          year_week,",
				"          date),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'ICU occupancy']),",
				"     counts = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotCountsWeek",
				"PivotCountsWeek select(mapColumn(",
				"          country,",
				"          source,",
				"          year_week,",
				"          new_hospital_occupancy_count = {counts_Daily hospital occupancy},",
				"          new_icu_occupancy_count = {counts_ICU occupancy},",
				"          date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumnsWeek",
				"RenameColumnsWeek, CountryCodes lookup(RenameColumnsWeek@country == CountryCodes@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCodesWeek",
				"LookupCountryCodesWeek, DateLookup lookup(split(RenameColumnsWeek@year_week, \"-\")[1] == year",
				"     && split(RenameColumnsWeek@year_week, \"W\")[2] == week_of_year,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupDates",
				"LookupDates aggregate(groupBy(RenameColumnsWeek@date,",
				"          RenameColumnsWeek@year_week),",
				"     reported_start_date = min(RenameColumnsWeek@date),",
				"          reported_end_date = max(RenameColumnsWeek@date)) ~> aggregate1"
			]
		}
	}
}